/*
 * This .jj file generates a parser for the programming language C.
 *
 * The grammar in EBNF form is as follows.
 * < one line > -> < functionPrefix > | < structDef > | < pointerDef >
 *
 * < functionPrefix > -> < returntype > (< functionPointer > | < functionDef >) ";"
 * < returntype > -> < datatype > | "void"
 * < datatype > -> "int" | "char" | "long" | "double"
 * < functionPointer > -> < oparen > < asterisk > < identifier > < cparen >
 *                         < oparen > < datatype > ("," < datatype >)* < cparen >
 * < oparen > -> "("
 * < asterisk > -> "*"
 * < identifier > -> < letter > (< number > | < letter >)*
 * < letter > -> ["0"-"9"]
 * < number > -> ["a"-"z"] | ["A"-"Z"]
 * < cparen > -> ")"
 * < functionDef > -> < funcName > < oparen > < parameterList > < cparen > "{" < body > " }"
 * < funcName > -> < identifier >
 * < parameterList > -> < datatype > < identifier > ("," < datatype > < identifier >)*
 * < body > -> < expr >
 * < expr > -> (< datatype > < identifier > "=" < number >) ";"
 *
 * < structDef > -> < struct > < identifier > "{" (< dataList >)* ";"
 *                   ( < returntype > < functionPointer >)* ";" " }" ";"
 * < dataList > -> < datatype > < identifier > ("[" < constant > "]")*
 * < constant > -> (< number >)+
 * < pointerDef > -> < datatype > < asterisk > < identifier > "=" (< constant > | < identifier >) ";"
 */

/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Cparser)
public class Cparser
{
  public static void main(String args []) throws ParseException
  {
    Cparser parser = new Cparser(System.in);
	 System.out.print("Enter an expression like :\n" + 
      "return_type function_name( parameter list ) {" 
      + "\n\tbody of the function" 
      + "\n }\n\nOR\n\n" 
      + "int *ip = 5000;" 
      + "\n\nOR\n\n" 
      + "struct Books { " 
      + "\n\tchar title[50];" 
      + "\n\tchar author[50];" 
      + "\n\tchar subject[100];" 
      + "\n\tint book_id"
      + "\n\tvoid (*print)(int,int);"
      + "\n};"
      + "\n\nOR\n\n"
      + "void (*functionPtr)(int,int)");
    while (true)
    {
      System.out.println("\nReading from standard input...");
     
      try
      {
        switch (Cparser.one_line())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1 : 
          System.out.println("Goodbye.");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Cparser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(Cparser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  < ASTERISK : "*" >
|   < OPAREN : "(" >
|   < CPAREN : ")" > 
|   < STRUCT : "struct" >
|  < DATATYPE :
    (
      "int"
    | "char"
    | "long"
    | "double"
    ) >
| 
  < RETURNTYPE :
    (
      < DATATYPE >
    | "void"
    ) >
| < IDENTIFIER :
    (< LETTER >)
    (
      < NUMBER >
    | < LETTER >
    )* >
| < NUMBER : [ "0"-"9" ] >
| < LETTER :
    [ "a"-"z" ]
  | [ "A"-"Z" ] >
| < CONSTANT : (< NUMBER >)+ >
}

int one_line() :
{}
{
  (
//    funcDef()
//  | functionPointer()
	functionPrefix()
  | structDef()
  | pointerDef()

  )
  {
    return 0;
  }
|
  {
    return 1;
  }
}

void funcName() :
{}
{
  < IDENTIFIER >
}

void parameterList() :
{}
{
  < DATATYPE ><IDENTIFIER > ("," < DATATYPE > < IDENTIFIER >)*
}

void body() : /** NOTE : SIMPLIFIED BODY CONTAINS ONLY SIMPLE EXPRESSION **/
{}
{
  expr()
}

void expr() :
{}
{
  (< DATATYPE > < IDENTIFIER > "=" < NUMBER >) ";"
}

void structDef() :
{}
{
  < STRUCT >< IDENTIFIER > "{"
  (dataList())* ";"
  (< RETURNTYPE > functionPointer())* ";"     "};"
}

void dataList() :
{}
{
 < DATATYPE > < IDENTIFIER > ("[" < CONSTANT > "]")*
}

void pointerDef() :
{}
{
  < DATATYPE > < ASTERISK > < IDENTIFIER > "="
  (
    < CONSTANT >
  | < IDENTIFIER >
  )
  ";"
}

void functionPrefix() :
{}
{
	< RETURNTYPE > (functionPointer() | functionDef() ) ";"
}

void functionPointer() :
{}
{
	<OPAREN> < ASTERISK > < IDENTIFIER > <CPAREN> <OPAREN> < DATATYPE > ("," < DATATYPE >)* < CPAREN >
}

void functionDef() :
{}
{
	funcName() <OPAREN> parameterList() <CPAREN> "{" body() "}"
}
