/*
 * Lab 5 for CUS-1168
 * by Kurtis Bassmann and Ryan Andres
 * 
 * This .jj file generates a parser for the programming language C.
 *
 * The grammar in EBNF form is as follows.
 * 
 * < one line > -> < functionPrefix > | < structDef > | < pointerDef >
 *
 * < functionPrefix > -> < returntype > (< functionPointer > | < functionDef >) ";"
 * < returntype > -> < datatype > | "void"
 * < datatype > -> "int" | "char" | "long" | "double"
 * < functionPointer > -> < oparen > < asterisk > < identifier > < cparen >
 *                         < oparen > < datatype > ("," < datatype >)* < cparen >
 * < oparen > -> "("
 * < asterisk > -> "*"
 * < identifier > -> < letter > (< number > | < letter >)*
 * < letter > -> ["0"-"9"]
 * < number > -> ["a"-"z"] | ["A"-"Z"]
 * < cparen > -> ")"
 * < functionDef > -> < funcName > < oparen > < parameterList > < cparen > "{" < body > " }"
 * < funcName > -> < identifier >
 * < parameterList > -> < datatype > < identifier > ("," < datatype > < identifier >)*
 * < body > -> < expr >
 * < expr > -> (< datatype > < identifier > "=" < number >) ";"
 *
 * < structDef > -> < struct > < identifier > "{" (< dataList >)* ";"
 *                   ( < returntype > < functionPointer >)* ";" " }" ";"
 * < dataList > -> < datatype > < identifier > ("[" < constant > "]")*
 * < constant > -> (< number >)+
 * < pointerDef > -> < datatype > < asterisk > < identifier > "=" (< constant > | < identifier >) ";"
 */

/*
 * Some expressions that will work include:
 *
 * int *ip = ptr;
 *
 * struct 3DPoint {
 *     double x;
 *     double y;
 * }
 *
 * Expressions that fail include:
 *
 * int func() {
 *     ;
 * }
 *
 * int *ip = ptr + 1;
 */

options
{
  static = true;
}

PARSER_BEGIN(Cparser)
public class Cparser
{
  public static void main(String args []) throws ParseException
  {
    Cparser parser = new Cparser(System.in);
    System.out.println("Welcome to the simple C parser...");
    System.out.println("Accepted expressions are:"
    + "\n\t1. Function Definition"
    + "\n\t2. Function Pointer"
    + "\n\t3. Struct Defintion"
    + "\n\t4. Simple Pointer Instanciation");
    System.out.print("\nexamples...\n\n"
    + "< return_type > <function_name >\"(\" < parameter list > \")\" {" 
    + "\n\t< body >" 
    + "\n \"}\"\";\""
    + "\n\nexample::"
    + "\nvoid add(int a, int b) {"
    + "\n\t int y = a + b"
    + "\n\t return y;"
    + "\n};"
    + "\n\nOR------------------------------------------------------\n\n" 
    + "\n< data_type > \"*\" < pointer_name > \"=\" < value > \";\""
    + "\nint *cp = ip;"
    + "\n\nOR------------------------------------------------------\n\n"
    + "\"struct\" < struct_name > \"{\" " 
    + "\n\t< variable_defintion_list >" 
    + "\n\t< function_pointer_list >" 
    + "\n\"}\"\";\"\n\n"
    + "example::"
    + "\nstruct Books { " 
    + "\n\tchar title[50];" 
    + "\n\tchar author[50];" 
    + "\n\tchar subject[100];" 
    + "\n\tint bookID;" 
    + "\n\tvoid (*print)(int,int);" 
    + "\n};\n\n"

    + "\n\nOR------------------------------------------------------\n\n"
    + "< return_type > \"(\" \"*\" < function_name > \")\" \"(\" < parameter_list > \";\""
    + "\nexamples:: void (*functionPtr)(int,int);"
    + "\n\t long (*datePtr)(int, char[]);");
    while (true)
    {
      System.out.println("\n\n\nReading from standard input...");
      try
      {
        switch (Cparser.one_line())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1 : 
          System.out.println("Goodbye.");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Cparser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(Cparser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  < RETURN : "return" >
| < ASTERISK : "*" >
| < OPAREN : "(" >
| < CPAREN : ")" >
| < STRUCT : "struct" >
| < DATATYPE :
    (
      "int"
    | "char"
    | "long"
    | "double"
    ) >
| < RETURNTYPE :
    (
      < DATATYPE >
    | "void"
    ) >

| < IDENTIFIER :
    (< LETTER >)
    (
      < NUMBER >
    | < LETTER >
    )* >
| < NUMBER : [ "0"-"9" ] >
| < LETTER :
    [ "a"-"z" ]
  | [ "A"-"Z" ] >
| < CONSTANT : (< NUMBER >)+ >
}

int one_line() :
{}
{
  (
   //   functionDef()
  //| 
      structDef()
  |
	functionPrefix()
  //functionPointer()
  //|
| 
  pointerDef()
  )
  
  {
    return 0;
  }
|
  {
    return 1;
  }
}

void pointerDef() :
{}
{
  < DATATYPE > < ASTERISK > < IDENTIFIER > "="
  (
    < CONSTANT >
  | < IDENTIFIER >
  )
  ";"
}

void parameterList() :
{}
{
  < DATATYPE > < IDENTIFIER > ("," < DATATYPE > < IDENTIFIER >)*
}

void body() : /** NOTE : SIMPLIFIED BODY **/
{}
{
//  (additionExpr() | simpleExpr())
	expr()
  < RETURN > < IDENTIFIER > ";"
}

void expr() :
{}
{
  
	< DATATYPE > (simpleExpr() | additionExpr())
}

void simpleExpr() :
{}
{
  < DATATYPE > < IDENTIFIER > "=" var() ";"
  
}

void var():
{}
{
(< CONSTANT > | < IDENTIFIER >)
}

void additionExpr() :
{}
{
	< IDENTIFIER > "=" var() "+" var() ";" 
}

void structDef() :
{}
{
  "struct" < IDENTIFIER > "{"
  (
    structPropDef() ";"
  )*
  (
    functionPointer() ";"
  )*
  "}" ";"
}

void structPropDef() :
{}
{
  < DATATYPE > < IDENTIFIER > ("[" < CONSTANT > "]")*
}

void functionPrefix() :
{}
{
  < RETURNTYPE >
  (
    functionDef()
  |  functionPointer()
  
  )
  ";"
}

void functionPointer() :
{}
{
< OPAREN > < ASTERISK > < IDENTIFIER > < CPAREN > < OPAREN > < DATATYPE > ("," < DATATYPE >)* < CPAREN > 
}

void functionDef() :
{}
{
< IDENTIFIER > < OPAREN > parameterList() < CPAREN > "{" body() "}"
}
